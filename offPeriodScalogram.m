function [scalogramWT,F] = offPeriodScalogram(signal,fs,percOverlap,LB_freq)
% Compute 10s scalograms sliding over entire window length with 50%
% overlap and zero-padding at edges (should not effect power of actual
% signal)


% Generated by MATLAB(R) 9.8 and Signal Processing Toolbox 8.4.
% Generated on: 23-Jul-2020 00:15:56

% Parameters
M=length(signal); % Total signal length
L=5000; % Segment length
NOVERLAP=L*percOverlap/100; % overlapping segments
K=(M-NOVERLAP)/(L-NOVERLAP); % Number of segments 
LminusOverlap=L-NOVERLAP;
segmentStart=1:LminusOverlap:K*LminusOverlap; %Start points of each segment
sampleRate = fs; % Hz
timeLimits = [0 (L-1)/sampleRate]; % seconds
frequencyLimits = [0 fs/2]; % Hz
voicesPerOctave = 8;
  
% Compute scalogram, store average absolute power in specified band
tic
scalogramWT=[];
for i = 1:length(segmentStart)
    if i<length(segmentStart)
    segment=signal(segmentStart(i):segmentStart(i)+L-1);
    %   allSegments(i,:)=totsig(segmentStart(i):segmentStart(i)+L-1);
    else
    segment=[signal(segmentStart(i):end),zeros(1,L-length(signal(segmentStart(i):end)))];
    % allSegments(i,:)=[totsig(segmentStart(i):end),zeros(1,L-length(totsig(segmentStart(i):end)))];
    end
    %end
    
    test2_ROI = segment(:);
    

    %%
    % Index into signal time region of interest
    startTime = 0; % seconds
    timeValues = startTime + (0:length(test2_ROI)-1).'/sampleRate;
    minIdx = timeValues >= timeLimits(1);
    maxIdx = timeValues <= timeLimits(2);
    test2_ROI = test2_ROI(minIdx&maxIdx);
    timeValues = timeValues(minIdx&maxIdx);

    %%
    % Limit the cwt frequency limits
    frequencyLimits(1) = max(frequencyLimits(1),...
    cwtfreqbounds(numel(test2_ROI),sampleRate));

    % Compute cwt
    % Run the function call below without output arguments to plot the results
    [WT,F] = cwt(test2_ROI,sampleRate, ...
    'VoicesPerOctave',voicesPerOctave, ...
    'FrequencyLimits',frequencyLimits);

    %Save scalogram output
    segmentWT=mean(abs(WT(F>LB_freq,:)));
    if i==1
        scalogramWT=segmentWT;
    else% i>1 & i<length(segmentStart)
        originalOverlap=scalogramWT(segmentStart(i):length(scalogramWT));
        newOverlap=segmentWT(1:NOVERLAP);
        scalogramWT(segmentStart(i):length(scalogramWT))=mean([originalOverlap;newOverlap]);
        scalogramWT=[scalogramWT,segmentWT(NOVERLAP+1:end)];  
    end
end
%Crop scalogram output to input length (remove zero padding)
scalogramWT=scalogramWT(1:length(signal));
toc

